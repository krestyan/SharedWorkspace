#include "bsq.h"

int min(int a, int b, int c)
{
  int m = a;
  if (m > b)
    m = b;
  if (m > c)
    m = c;
  return m;
}

void find_max_square(t_map *map)
{
	int i;
	int j;
	int **M;
	int x;
	int y;
	int S[map->x][map->y];
	int max_of_s;
	int max_i;
	int max_j;

	y = map->y;
	x = map->x;
	M = convert(map);

	printf("in findsqr\n");
	i = 0;
	while( i < x)
	{
		S[i][0] = M[i][0];
		i++;
	}
	printf("01 aft while\n");
	j = 0;
	while( j < y)
	{
		S[0][j] = M[0][j];
		j++;
	}
	printf("02 aft while\n");
	i = 1;

	while(i < y)
	{
		j = 1;
		while(j < x)
		{
			if(M[i][j] == 1)
        		S[i][j] = min(S[i][j-1], S[i-1][j], S[i-1][j-1]) + 1;
    		else
        		S[i][j] = 0;
			j++;
		}
		i++;
	}
	printf("Find the maximum entry\n");
  /* Find the maximum entry, and indexes of maximum entry
     in S[][] */
	max_of_s = S[0][0];
	max_i = 0;
	max_j = 0;


	i = 1;
	while(i < y)
	{
		j = 1;
		while(j < x)
		{
			if(max_of_s < S[i][j])
    		{
				max_of_s = S[i][j];
				max_i = i;
				max_j = j;
			}
			j++;
		}
		i++;
	}

	g_max_y = max_i;
	g_max_x = max_j;
	g_size = max_of_s;

	printf("y = %d, x = %d, square size = %d\n", max_i, max_j, max_of_s);
	printf("Maximum size sub-matrix is: \n");

	i = max_i;
	while(i > max_i - max_of_s)
	{
		j = max_j;
		while(j > max_j - max_of_s)
		{
			printf("%d ", M[i][j]);
			j--;
		}
		printf("\n");
		i--;
	}
}